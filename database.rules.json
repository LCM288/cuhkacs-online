{
  "rules": {
    ".read": false,
    ".write": false,
    "members": {
      ".read": "auth.token.email.endsWith('@link.cuhk.edu.hk') && root.child('executives').child(auth.token.email.replace('@link.cuhk.edu.hk', '')).exists()",
      ".write": "auth.token.email.endsWith('@link.cuhk.edu.hk') && root.child('executives').child(auth.token.email.replace('@link.cuhk.edu.hk', '')).exists()",
      ".indexOn": "memberStatus/since",
      "$sid": {
        ".read": "auth.token.email.endsWith('@link.cuhk.edu.hk') && auth.token.email.replace('@link.cuhk.edu.hk', '') === $sid",
        ".write": "auth.token.email.endsWith('@link.cuhk.edu.hk') && auth.token.email.replace('@link.cuhk.edu.hk', '') === $sid && (!data.child('memberStatus').child('since').exists() || data.child('memberStatus').child('until').val() < now)",
        ".validate": "newData.child('updatedAt').val() !== data.child('updatedAt').val() && newData.hasChildren(['sid', 'name', 'studentStatus', 'createdAt', 'updatedAt']) && (newData.hasChildren(['memberStatus']) || !data.hasChildren(['memberStatus']))",
        "sid": {
          ".validate": "newData.isString() && newData.val().matches(/^\\d*$/) && newData.val().length < 16 && newData.val() === $sid"
        },
        "name": {
          ".validate": "newData.hasChildren(['eng'])",
          "chi": {
            ".validate": "!newData.exists() || (newData.isString() && newData.val().length < 64)"
          },
          "eng": {
            ".validate": "newData.isString() && newData.val().length < 128"
          },
          "$other": {
            ".validate": false
          }
        },
        "gender": {
          ".validate": "!newData.exists() || (newData.isString() && newData.val().matches(/^((fe)?male|other)$/))"
        },
        "dob": {
          ".validate": "!newData.exists() || newData.isString() && newData.val().matches(/^\\d{4}-\\d{2}-\\d{2}$/)"
        },
        "email": {
          ".validate": "!newData.exists() || (newData.isString() && newData.val().matches(/^.+@.+$/) && newData.val().length < 324)"
        },
        "phone": {
          ".validate": "!newData.exists() || (newData.isString() && newData.val().matches(/^\\+?\\d+(-\\d+)*$/) && newData.val().length < 64)"
        },
        "studentStatus": {
          ".validate": "newData.hasChildren(['college', 'major', 'entryDate', 'gradDate'])",
          "college": {
            ".validate": "newData.isString() && newData.val().matches(/^(CC|NA|UC|SC|WYS|WS|SH|MC|CW|NO)$/)"
          },
          "major": {
            ".validate": "newData.isString() && newData.val().matches(/^(\\w| )+$/) && newData.val().length < 256"
          },
          "entryDate": {
            ".validate": "newData.isString() && newData.val().matches(/^\\d{4}-\\d{2}-\\d{2}$/)"
          },
          "gradDate": {
            ".validate": "newData.isString() && newData.val().matches(/^\\d{4}-\\d{2}-\\d{2}$/)"
          },
          "$other": {
            ".validate": false
          }
        },
        "memberStatus": {
          ".validate": "newData.hasChildren(['since', 'lastRenewed', 'until']) && auth !== null && auth.token !== null && auth.token.email.endsWith('@link.cuhk.edu.hk') && root.child('executives').child(auth.token.email.replace('@link.cuhk.edu.hk', '')).exists()",
          "since": {
            ".validate": "(!data.exists() && newData.isNumber() && ((newData.val() > now - 1000 && newData.val() < now + 1000) || !data.parent().parent().exists())) || data.val() === newData.val()"
          },
          "lastRenewed": {
            ".validate": "((!data.exists() || newData.parent().child('until').val() > data.parent().child('until').val()) && newData.isNumber() && newData.val() > now - 1000 && newData.val() < now + 1000) || (newData.parent().child('until').val() <= data.parent().child('until').val() && data.val() === newData.val())"
          },
          "until": {
            ".validate": "newData.isNumber() || data.val() === newData.val()"
          },
          "$other": {
            ".validate": false
          }
        },
        "createdAt": {
          ".validate": "(!data.exists() && newData.isNumber() && newData.val() > now - 1000 && newData.val() < now + 1000) || data.val() === newData.val()"
        },
        "updatedAt": {
          ".validate": "newData.isNumber() && newData.val() > now - 1000 && newData.val() < now + 1000"
        },
        "$other": {
          ".validate": false
        }
      }
    },
    "executives": {
      ".read": "auth !== null && auth.token !== null && auth.token.email.endsWith('@link.cuhk.edu.hk') && root.child('executives').child(auth.token.email.replace('@link.cuhk.edu.hk', '')).exists()",
      ".write": "auth !== null && auth.token !== null && auth.token.email.endsWith('@link.cuhk.edu.hk') && root.child('executives').child(auth.token.email.replace('@link.cuhk.edu.hk', '')).exists()",
      "$sid": {
        ".read": "auth !== null && auth.token !== null && auth.token.email.endsWith('@link.cuhk.edu.hk') && auth.token.email.replace('@link.cuhk.edu.hk', '') === $sid",
        ".validate": "newData.child('updatedAt').val() !== data.child('updatedAt').val() && newData.hasChildren(['sid', 'displayName', 'title', 'createdAt', 'updatedAt'])",
        "sid": {
          ".validate": "newData.isString() && newData.val().matches(/^\\d*$/) && newData.val().length < 16 && newData.val() === $sid"
        },
        "displayName": {
          ".validate": "newData.isString() && newData.val().length < 128"
        },
        "title": {
          ".validate": "newData.isString() && newData.val().length < 128"
        },
        "createdAt": {
          ".validate": "(!data.exists() && newData.isNumber() && newData.val() > now - 1000 && newData.val() < now + 1000) || data.val() === newData.val()"
        },
        "updatedAt": {
          ".validate": "newData.isNumber() && newData.val() > now - 1000 && newData.val() < now + 1000"
        },
        "$other": {
          ".validate": false
        }
      }
    },
    "publicMessages": {
      ".read": "auth !== null && auth.token !== null && auth.token.email.endsWith('@link.cuhk.edu.hk') && root.child('executives').child(auth.token.email.replace('@link.cuhk.edu.hk', '')).exists()",
      ".write": "auth !== null && auth.token !== null && auth.token.email.endsWith('@link.cuhk.edu.hk') && root.child('executives').child(auth.token.email.replace('@link.cuhk.edu.hk', '')).exists()",
      ".validate": "newData.hasChildren(['library', 'welcome', 'member', 'registered', 'expired', 'visitor'])",
      "library": {
        ".read": true,
        ".validate": "newData.child('updatedAt').val() !== data.child('updatedAt').val() && newData.hasChildren(['message', 'updatedAt'])",
        "message": {
          ".validate": "newData.isString() && newData.val().length < 65536"
        },
        "updatedAt": {
          ".validate": "newData.isNumber() && newData.val() > now - 1000 && newData.val() < now + 1000"
        }
      },
      "welcome": {
        ".read": true,
        ".validate": "newData.child('updatedAt').val() !== data.child('updatedAt').val() && newData.hasChildren(['message', 'updatedAt'])",
        "message": {
          ".validate": "newData.isString() && newData.val().length < 65536"
        },
        "updatedAt": {
          ".validate": "newData.isNumber() && newData.val() > now - 1000 && newData.val() < now + 1000"
        }
      },
      "member": {
        ".read": "auth !== null && auth.token !== null && auth.token.email.endsWith('@link.cuhk.edu.hk') && root.child('members').child(auth.token.email.replace('@link.cuhk.edu.hk', '')).exists()",
        ".validate": "newData.child('updatedAt').val() !== data.child('updatedAt').val() && newData.hasChildren(['message', 'updatedAt'])",
        "message": {
          ".validate": "newData.isString() && newData.val().length < 65536"
        },
        "updatedAt": {
          ".validate": "newData.isNumber() && newData.val() > now - 1000 && newData.val() < now + 1000"
        }
      },
      "expired": {
        ".read": "auth !== null && auth.token !== null && auth.token.email.endsWith('@link.cuhk.edu.hk') && root.child('members').child(auth.token.email.replace('@link.cuhk.edu.hk', '')).exists()",
        ".validate": "newData.child('updatedAt').val() !== data.child('updatedAt').val() && newData.hasChildren(['message', 'updatedAt'])",
        "message": {
          ".validate": "newData.isString() && newData.val().length < 65536"
        },
        "updatedAt": {
          ".validate": "newData.isNumber() && newData.val() > now - 1000 && newData.val() < now + 1000"
        }
      },
      "registered": {
        ".read": "auth !== null && auth.token !== null && auth.token.email.endsWith('@link.cuhk.edu.hk') && root.child('members').child(auth.token.email.replace('@link.cuhk.edu.hk', '')).exists()",
        ".validate": "newData.child('updatedAt').val() !== data.child('updatedAt').val() && newData.hasChildren(['message', 'updatedAt'])",
        "message": {
          ".validate": "newData.isString() && newData.val().length < 65536"
        },
        "updatedAt": {
          ".validate": "newData.isNumber() && newData.val() > now - 1000 && newData.val() < now + 1000"
        }
      },
      "visitor": {
        ".read": true,
        ".validate": "newData.child('updatedAt').val() !== data.child('updatedAt').val() && newData.hasChildren(['message', 'updatedAt'])",
        "message": {
          ".validate": "newData.isString() && newData.val().length < 65536"
        },
        "updatedAt": {
          ".validate": "newData.isNumber() && newData.val() > now - 1000 && newData.val() < now + 1000"
        }
      },
      "$other": {
        ".validate": false
      }
    },
    "library": {
      ".read": "auth !== null && auth.token !== null && auth.token.email.endsWith('@link.cuhk.edu.hk') && root.child('executives').child(auth.token.email.replace('@link.cuhk.edu.hk', '')).exists()",
      ".write": "auth !== null && auth.token !== null && auth.token.email.endsWith('@link.cuhk.edu.hk') && root.child('executives').child(auth.token.email.replace('@link.cuhk.edu.hk', '')).exists()",
      ".validate": "newData.hasChildren(['series', 'series_book', 'series_borrow', 'series_keyword', 'books', 'book_borrow', 'locations', 'location_series', 'location_book', 'borrows', 'keyword_series', 'memberBorrowings'])",
      "series": {
        ".read": true,
        ".validate": "newData.hasChildren(['count', 'data'])",
        "count": {
          ".validate": "newData.isNumber()"
        },
        "data": {
          ".indexOn": "updatedAt",
          "$seriesId": {
            ".validate": "newData.child('updatedAt').val() !== data.child('updatedAt').val() && newData.hasChildren(['title', 'author', 'bookCount', 'borrowCount', 'keywordCount', 'createdAt', 'updatedAt']) && (newData.child('bookCount').val() === 0 || newData.hasChildren(['locations'])) && $seriesId.length < 40",
            "title": {
              ".validate": "newData.isString() && newData.val().length < 128"
            },
            "author": {
              ".validate": "newData.isString() && newData.val().length < 128"
            },
            "locations": {
              "$location": {
                ".validate": "newData.parent().parent().parent().parent().parent().child('location_series').child($location).child($seriesId).val() === newData.val()"
              }
            },
            "bookCount": {
              ".validate": "newData.isNumber()"
            },
            "borrowCount": {
              ".validate": "newData.isNumber()"
            },
            "keywordCount": {
              ".validate": "newData.isNumber()"
            },
            "createdAt": {
              ".validate": "newData.isNumber() && ((!data.exists() && newData.val() > now - 1000 && newData.val() < now + 1000) || data.val() === newData.val())"
            },
            "updatedAt": {
              ".validate": "newData.isNumber() && newData.val() > now - 1000 && newData.val() < now + 1000"
            },
            "$other": {
              ".validate": false
            }
          }
        },
        "$other": {
          ".validate": false
        }
      },
      "series_book": {
        ".read": true,
        "$seriesId": {
          ".validate": "newData.parent().parent().child('series').child('data').child($seriesId).exists()",
          "$bookId": {
            ".validate": "(!newData.exists() && newData.parent().parent().parent().child('books').child('data').child($bookId).child('seriesId').val() !== $seriesId) || (newData.val() === true && newData.parent().parent().parent().child('books').child('data').child($bookId).child('seriesId').val() === $seriesId)"
          }
        }
      },
      "series_borrow": {
        "$seriesId": {
          ".validate": "newData.parent().parent().child('series').child('data').child($seriesId).exists()",
          "$borrowId": {
            ".validate": "newData.val() === true && newData.parent().parent().parent().child('borrows').child('data').child($borrowId).child('seriesId').val() === newData.val()"
          }
        }
      },
      "series_keyword": {
        ".read": true,
        "$seriesId": {
          ".validate": "newData.parent().parent().child('series').child('data').child($seriesId).exists()",
          "$keyword": {
            ".validate": "(newData.val() === true || !newData.exists()) && newData.exists() === newData.parent().parent().parent().child('keyword_series').child($keyword).child($seriesId).exists()"
          }
        }
      },
      "books": {
        ".read": true,
        ".validate": "newData.hasChildren(['count', 'data'])",
        "count": {
          ".validate": "newData.isNumber()"
        },
        "data": {
          ".indexOn": "seriesId",
          "$bookId": {
            ".validate": "newData.child('updatedAt').val() !== data.child('updatedAt').val() && data.child('status').val() !== 'deleted' && newData.hasChildren(['seriesId', 'volume', 'language', 'status', 'location', 'borrowCount', 'isbn', 'createdAt', 'updatedAt']) && $bookId.length < 40",
            "seriesId": {
              ".validate": "(!data.exists() || newData.val() === data.val()) && newData.isString() && newData.parent().parent().parent().parent().child('series_book').child(newData.val()).child($bookId).val() === true && (!data.exists() || newData.parent().parent().parent().parent().child('series_volume').child(data.val()).child($bookId).val() === null)"
            },
            "volume": {
              ".validate": "newData.isString() && newData.val().length < 16"
            },
            "language": {
              ".validate": "newData.isString() && newData.val().length < 32"
            },
            "status": {
              ".validate": "newData.isString() && newData.val().matches(/^(on-loan)|(on-shelf)|(lost)|(deleted)$/)"
            },
            "location": {
              ".validate": "newData.isString() && (newData.parent().child('status').val() === 'deleted' || newData.parent().parent().parent().parent().child('location_book').child(newData.val()).child($bookId).exists()) && (!data.exists() || (newData.val() === data.val() && newData.parent().child('status').val() !== 'deleted') || !newData.parent().parent().parent().parent().child('location_book').child(data.val()).child($bookId).exists())"
            },
            "borrowCount": {
              ".validate": "newData.isNumber()"
            },
            "isbn": {
              ".validate": "newData.isString() && newData.val().length < 16"
            },
            "createdAt": {
              ".validate": "newData.isNumber() && ((!data.exists() && newData.val() > now - 1000 && newData.val() < now + 1000) || data.val() === newData.val())"
            },
            "updatedAt": {
              ".validate": "newData.isNumber() && newData.val() > now - 1000 && newData.val() < now + 1000"
            },
            "$other": {
              ".validate": false
            }
          }
        },
        "$other": {
          ".validate": false
        }
      },
      "book_borrow": {
        "$bookId": {
          ".validate": "newData.parent().parent().child('books').child('data').child($bookId).exists()",
          "$borrowId": {
            ".validate": "newData.val() === true && newData.parent().parent().parent().child('borrows').child('data').child($borrowId).child('bookId').val() === $bookId"
          }
        }
      },
      "locations": {
        ".read": true,
        ".validate": "newData.hasChildren(['data'])",
        "data": {
          "$location": {
            ".validate": "newData.child('updatedAt').val() !== data.child('updatedAt').val() && newData.hasChildren(['bookCount', 'updatedAt']) && $location.length < 16",
            "bookCount": {
              ".validate": "newData.isNumber()"
            },
            "updatedAt": {
              ".validate": "newData.isNumber() && newData.val() > now - 1000 && newData.val() < now + 1000"
            },
            "$other": {
              ".validate": false
            }
          }
        },
        "$other": {
          ".validate": false
        }
      },
      "location_series": {
        ".read": true,
        "$location": {
          ".validate": "newData.parent().parent().child('locations').child('data').child($location).exists()",
          "$seriesId": {
            ".validate": "newData.isNumber() && newData.parent().parent().parent().child('series').child('data').child($seriesId).child('locations').child($location).val() === newData.val()"
          }
        }
      },
      "location_book": {
        ".read": true,
        "$location": {
          ".validate": "newData.parent().parent().child('locations').child('data').child($location).exists()",
          "$bookId": {
            ".validate": "(!newData.exists() || newData.val() === true) && newData.exists() === (newData.parent().parent().parent().child('books').child('data').child($bookId).child('location').val() === $location && newData.parent().parent().parent().child('books').child('data').child($bookId).child('status').val() !== 'deleted')"
          }
        }
      },
      "borrows": {
        ".validate": "newData.hasChildren(['count', 'data'])",
        "count": {
          ".validate": "newData.isNumber()"
        },
        "data": {
          "$borrowId": {
            ".read": "auth.token.email.endsWith('@link.cuhk.edu.hk') && auth.token.email.replace('@link.cuhk.edu.hk', '') === data.child('sid').val()",
            ".validate": "newData.child('updatedAt').val() !== data.child('updatedAt').val() && newData.hasChildren(['sid', 'series', 'bookId', 'borrowTime', 'dueDate', 'renewCount', 'createdAt', 'updatedAt']) && !data.child('returnTime').exists() && $borrowId.length < 40",
            "sid": {
              ".validate": "(data.val() === newData.val() || (!data.exists() && newData.isString() && root.child('members').child(newData.val()).child('memberStatus').exists() && root.child('members').child(newData.val()).child('memberStatus').child('since').val() > now && root.child('members').child(newData.val()).child('memberStatus').child('until').val() < now)) && newData.parent().parent().parent().parent().child('memberBorrows').child(newData.val()).child('borrows').child($borrowId).val() === true"
            },
            "seriesId": {
              ".validate": "(data.val() === newData.val() || (!data.exists() && newData.isString())) && newData.parent().parent().parent().parent().child('series_borrow').child(newData.val()).child($borrowId).val() === true"
            },
            "bookId": {
              ".validate": "(data.val() === newData.val() || (!data.exists() && newData.isString())) && newData.parent().parent().parent().parent().child('book_borrow').child(newData.val()).child($borrowId).val() === true"
            },
            "borrowTime": {
              ".validate": "data.val() === newData.val() || (!data.exists() && newData.isNumber() && newData.val() > now - 1000 && newData.val() < now + 1000)"
            },
            "dueDate": {
              ".validate": "newData.isString() && newData.val().matches(/\\d{4}-\\d{2}-\\d{2}/)"
            },
            "renewCount": {
              ".validate": "newData.isNumber() && (newData.val() === data.val() || (newData.parent().child('dueDate').val() !== data.parent().child('dueDate').val() && ((data.exists() ? newData.val() === data.val() + 1 : newData.val() === 1))))"
            },
            "returnTime": {
              ".validate": "newData.isNumber() && newData.val() > now - 1000 && newData.val() < now + 1000"
            },
            "createdAt": {
              ".validate": "newData.isNumber() && ((!data.exists() && newData.val() > now - 1000 && newData.val() < now + 1000) || data.val() === newData.val())"
            },
            "updatedAt": {
              ".validate": "newData.isNumber() && newData.val() > now - 1000 && newData.val() < now + 1000"
            },
            "$other": {
              ".validate": false
            }
          }
        },
        "$other": {
          ".validate": false
        }
      },
      "keyword_series": {
        ".read": true,
        "$keyword": {
          "$seriesId": {
            ".validate": "(newData.val() === true || !newData.exists()) && newData.exists() === newData.parent().parent().parent().child('series_keyword').child($seriesId).child($keyword).exists()"
          }
        }
      },
      "memberBorrowings": {
        "$sid": {
          ".read": "auth.token.email.endsWith('@link.cuhk.edu.hk') && auth.token.email.replace('@link.cuhk.edu.hk', '') === $sid",
          ".validate": "newData.child('updatedAt').val() !== data.child('updatedAt').val() && newData.hasChildren(['borrowCount', 'borrows', 'currentBorrowCount', 'currentBorrows', 'updatedAt']) && (data.exists() || (newData.isString() && root.child('members').child($sid).child('memberStatus').exists() && root.child('members').child($sid).child('memberStatus').child('since').val() > now && root.child('members').child($sid).child('memberStatus').child('until').val() < now))",
          "borrowCount": {
            ".validate": "newData.isNumber()"
          },
          "borrows": {
            "$borrowId": {
              ".validate": "newData.val() === true && newData.parent().parent().parent().parent().child('borrows').child('data').child(newData.val()).child('sid').val() === $sid"
            }
          },
          "currentBorrowCount": {
            ".validate": "newData.isNumber()"
          },
          "currentBorrows": {
            "$borrowId": {
              ".validate": "!newData.exists() || (newData.val() === true && newData.parent().parent().parent().parent().child('borrows').child('data').child(newData.val()).exists())"
            }
          },
          "updatedAt": {
            ".validate": "newData.isNumber() && newData.val() > now - 1000 && newData.val() < now + 1000"
          },
          "$other": {
            ".validate": false
          }
        }
      },
      "$other": {
        ".validate": false
      }
    },
    "$other": {
      ".validate": false
    }
  }
}